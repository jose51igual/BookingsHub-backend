name: Deploy Backend to Server

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        
    - name: Create deployment package
      working-directory: .
      run: |
        mkdir -p deploy
        # Copiar todos los archivos y carpetas excepto los especificados
        shopt -s extglob # Habilitar patrones extendidos de globbing
        cp -r !(deploy|.git*|.github|node_modules|logs|tests) deploy/
        
        # Crear archivo de versión en el paquete de despliegue
        echo "VERSION=$(date +%Y%m%d_%H%M%S)" > deploy/.env.deploy
        echo "COMMIT_HASH=${{ github.sha }}" >> deploy/.env.deploy
        
    - name: Deploy to Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT || 22 }}
        script: |
          mkdir -p /var/www/bookings-hub
          mkdir -p /var/www/bookings-hub/backups
          
          if [ -d "/var/www/bookings-hub/current" ]; then
            sudo mv /var/www/bookings-hub/current /var/www/bookings-hub/backups_$(date +%Y%m%d_%H%M%S)
          fi
          
          mkdir -p /var/www/bookings-hub/current
          
    - name: Upload files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT || 22 }}
        source: "deploy/*"
        target: "/var/www/bookings-hub/current"
        strip_components: 1

    - name: Install dependencies and restart services
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT || 22 }}
        script: |
          cd /var/www/bookings-hub/current
          
          echo "Installing dependencies..."
          npm ci --production
          
          echo "Creating .env file on server..."
          cat > .env << EOF
          NODE_ENV=production
          PORT=${{ secrets.PORT || 3000 }}
          HOST=${{ secrets.HOST || '127.0.0.1' }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT || 3306 }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID || 'falta' }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET || 'falta' }}
          LOG_LEVEL=${{ secrets.LOG_LEVEL || 'info' }}
          CORS_ORIGIN=${{ secrets.CORS_ORIGIN || 'http://bookingshub.es,https://bookingshub.es,http://www.bookingshub.es,https://www.bookingshub.es' }}
          DATABASE_URL="mysql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT || 3306 }}/${{ secrets.DB_NAME }}"
          EOF
          echo ".env file created successfully."
          
          echo "Cleaning previous Prisma generation..."
          rm -rf generated/prisma node_modules/.prisma
          rm -rf prisma/migrations/20*/*
          
          echo "Resetting Prisma schema cache..."
          npx prisma format || echo "Prisma format completed"
          
          echo "Running Prisma migrations..."
          npx prisma migrate deploy || {
            echo "Migration failed, attempting to continue..."
            exit 0
          }
          echo "Prisma migrations completed."

          echo "Generating Prisma client.."
          npx prisma generate || {
            echo "Prisma client generation failed"
            exit 1
          }
          echo "Prisma client generated successfully."
          
          echo "Populating database with fresh data..."
          npx prisma db seed || echo "Database seeding failed, continuing..."
          echo "Database population completed."
          
          if ! command -v pm2 &> /dev/null; then
            echo "PM2 no encontrado, instalando..."
            sudo npm install -g pm2
          fi

          echo "Reiniciando la aplicación con PM2..."
          pm2 delete bookings-hub-backend || true
          pm2 start ecosystem.config.js --env production
          pm2 save
          
          echo "Backend deployment completed successfully!"
